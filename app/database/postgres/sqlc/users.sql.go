// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (display_name, username, email, password)
VALUES ($1, $2, $3, $4) RETURNING id, display_name, username, email, password, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	DisplayName string `db:"display_name" json:"display_name"`
	Username    string `db:"username" json:"username"`
	Email       string `db:"email" json:"email"`
	Password    string `db:"password" json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.DisplayName,
		arg.Username,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, display_name, username, email, password, created_at, updated_at, deleted_at
FROM users
WHERE id = $1
  AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, display_name, username, email, password, created_at, updated_at, deleted_at
FROM users
WHERE email = $1
  AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, display_name, username, email, password, created_at, updated_at, deleted_at
FROM users
WHERE username = $1
  AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserDisplayName = `-- name: GetUserDisplayName :one
SELECT display_name
FROM users
WHERE id = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetUserDisplayName(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRow(ctx, getUserDisplayName, id)
	var display_name string
	err := row.Scan(&display_name)
	return display_name, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET display_name = $1,
    username     = $2,
    email        = $3
WHERE id = $4
  AND deleted_at IS NULL
`

type UpdateUserParams struct {
	DisplayName string `db:"display_name" json:"display_name"`
	Username    string `db:"username" json:"username"`
	Email       string `db:"email" json:"email"`
	ID          int32  `db:"id" json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.DisplayName,
		arg.Username,
		arg.Email,
		arg.ID,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password = $1
WHERE id = $2
  AND deleted_at IS NULL
`

type UpdateUserPasswordParams struct {
	Password string `db:"password" json:"password"`
	ID       int32  `db:"id" json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg *UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.Password, arg.ID)
	return err
}
